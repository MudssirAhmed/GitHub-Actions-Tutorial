name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
  workflow_dispatch:
  
jobs:
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v2
#
#      - name: Setup JDK
#        uses: actions/setup-java@v2
#        with:
#          distribution: 'zulu'
#          java-version: '17'
#
#      - name: Grant execute permission for Gradle wrapper
#        run: chmod +x gradlew
#
#      - name: Run Lint
#        run: ./gradlew lintDebug
#
#      - name: Upload html test report
#        uses: actions/upload-artifact@v2
#        with:
#          name: lint.html
#          path: app/build/reports/lint-results-debug.html
#
#  unit-test:
#    needs: [lint]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v2
#
#      - name: Setup JDK
#        uses: actions/setup-java@v2
#        with:
#          distribution: 'zulu'
#          java-version: '17'
#
#      - name: Grant execute permission for Gradle wrapper
#        run: chmod +x gradlew
#
#      - name: Run tests
#        run: ./gradlew test
#
#      - name: Upload test report
#        uses: actions/upload-artifact@v2
#        with:
#          name: unit_test_report
#          path: app/build/reports/tests/testDebugUnitTest
#
#  static-code-analysis:
#    needs: [unit-test]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v2
#
#      - name: Setup JDK
#        uses: actions/setup-java@v2
#        with:
#          distribution: 'zulu'
#          java-version: '17'
#
#      - name: Grant execute permission for Gradle wrapper
#        run: chmod +x gradlew
#
#      - name: Build and analyze
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#        run: ./gradlew build sonar --info
#
#  build-debug-apk:
#    needs: [static-code-analysis]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v2
#
#      - name: Setup JDK
#        uses: actions/setup-java@v2
#        with:
#          distribution: 'zulu'
#          java-version: '17'
#
#      - name: Grant execute permission for Gradle wrapper
#        run: chmod +x gradlew
#
#      - name: Build debug APK
#        run: ./gradlew assembleDebug --stacktrace
#
#      - name: Upload APK
#        uses: actions/upload-artifact@v2
#        with:
#          name: app-debug.apk
#          path: app/build/outputs/apk/debug/app-debug.apk

  build-signed-apk:
#    needs: [build-debug-apk]
    name: Build and Sign Debug APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Here we need to decode keystore.jks from base64 string and place it
      # in the folder specified in the release signing configuration
      - name: Decode Keystore
        id: decode_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'android_keystore.jks'
          fileDir: '/home/runner/work/GitHub-Actions-Tutorial/GitHub-Actions-Tutorial/app/keystore/'
          encodedString: ${{ secrets.KEYSTORE_FILE }}

      # Build and sign APK ("-x test" argument is used to skip tests)
      - name: Build APK
        run: ./gradlew :app:assembleRelease -x test
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}

      # Show information about the APK's signing certificates
      - name: Verify Signature
        run: $ANDROID_SDK_ROOT/build-tools/33.0.1/apksigner verify --print-certs app/build/outputs/apk/release/app-release${{ github.event.inputs.version }}.apk

      # Save the APK after the Build job is complete to publish it as a Github release in the next job
      - name: Upload APK
        uses: actions/upload-artifact@v3.1.2
        with:
          name: app-release.apk
          path: app/build/outputs/apk/release/app-release${{ github.event.inputs.version }}.apk